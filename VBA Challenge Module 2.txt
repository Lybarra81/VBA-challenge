'VBA Challenge 2'

Sub StockMultiYear():
    
    Dim tickerSymbol As String
    Dim openingPrice As Double
    Dim closingPrice As Double
    Dim openingDate As Date
    Dim closingDate As Date
    Dim yearlyChange As Double
    Dim percentChange As Double
    Dim stockVolume As Double
    
    Dim greatestIncreaseTicker As String
    Dim greatestDecreaseTicker As String
    Dim greatestVolumeTicker As String
    
    Dim greatestIncreaseValue As Double
    Dim greatestDecreaseValue As Double
    Dim greatestVolumeValue As Double
    
    Dim lastRow As Long
    Dim numSheets As Integer
    Dim tickerCount As Integer
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim l As Integer
    
'# of sheets?

numSheets = Sheets.Count

'for each worksheet:
    For i = 1 To numSheets
        'go to the first then next sheet
            Sheets(i).Activate
        
        'how many records per sheet are we using ?
       lastRow = Cells(Rows.Count, 1).End(xlUp).Row
        
    'will convert column B to date in new cell Column C
        Range("C1").EntireColumn.Insert
        Cells(1, 3).Value = Cells(1, 2).Value
        Range("C2").FormulaR1C1 = "=Date(Left(RC[-1],4),MID(RC[-1],5,2),RIGHT(RC[-1],2))"
        Range("C2").AutoFill Destination:=Range("C2:C" & lastRow)
        Columns("C:C").NumberFormat = "m/d/yyyy"
        Columns("C:C").ColumnWidth = 10
        Range("B:B").EntireColumn.Hidden = True
        
    'Will label and format summary table columns
    'J column = Ticker name
        With Range("j1")
            .Value = "Ticker"
            .ColumnWidth = 6
        End With
    
    'K Column = The Yearly Change and will require conditional formatting: Green=greater than 0, Red=less than 0.
        With Range("K1")
            .Value = "Yearly Change"
            .ColumnWidth = 13
        End With
        Columns("k:K").NumberFormat = "$#,##0.00"
        
           'rule for greater than 0
    With Columns("K:L")
        .FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:="=0"
        .FormatConditions(Columns("K:K").FormatConditions.Count).SetFirstPriority
        .FormatConditions(1).Font.Color = -16752384
        .FormatConditions(1).Interior.Color = 13561798
        .FormatConditions(1).StopIfTrue = False
    End With
    
    'rule for less than 0
    With Columns("K:L")
        .FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, Formula1:="=0"
        .FormatConditions(Columns("K:K").FormatConditions.Count).SetFirstPriority
        .FormatConditions(1).Font.Color = -16383844
        .FormatConditions(1).Interior.Color = 13551615
        .FormatConditions(1).StopIfTrue = False
    End With
    
    'rule for column header   'keep this one third so that it becomes first priority and header stays not formatted
    With Range("K1")
        .FormatConditions.Add Type:=xlTextString, String:="Yearly Change", TextOperator:=xlContains
        .FormatConditions(Range("K1").FormatConditions.Count).SetFirstPriority
        .FormatConditions(1).Font.Color = vbBlack  'https://www.automateexcel.com/excel-formatting/color-reference-for-color-index/
        .FormatConditions(1).Interior.ColorIndex = -4142  'https://www.mrexcel.com/board/threads/changing-a-colored-cell-to-no-fill-not-white-color.453172/
        .FormatConditions(1).StopIfTrue = False
    End With
        With Range("L1")
        .FormatConditions.Add Type:=xlTextString, String:="Percent Change", TextOperator:=xlContains
        .FormatConditions(Range("K1").FormatConditions.Count).SetFirstPriority
        .FormatConditions(1).Font.Color = vbBlack  'https://www.automateexcel.com/excel-formatting/color-reference-for-color-index/
        .FormatConditions(1).Interior.ColorIndex = -4142  'https://www.mrexcel.com/board/threads/changing-a-colored-cell-to-no-fill-not-white-color.453172/
        .FormatConditions(1).StopIfTrue = False
    End With
 
    'Column L = Percent Change and requires a number format to %
    With Range("L1")
        .Value = "Percent Change"
        .ColumnWidth = 14.5
    End With
    Columns("L:L").NumberFormat = "0.00%"

    'Column M = Total Stock Volume
    With Range("M1")
        .Value = "Total Stock Volume"
        .ColumnWidth = 18
    End With
    
    'clear ticker symbol and ticker count at the beginning of each new sheet
    tickerSymbol = ""
    tickerCount = 1 ' starting at 1 to account for column headers
    
    'loop through every row, looking for matching ticker symbols
    'capture opening and closing date and value
    'record running sum of stock volume
    For j = 2 To lastRow
        'if the ticker symbol is the same as the last row, skip it.
        'otherwise, collect data
        If Cells(j, 1).Value <> tickerSymbol Then
            tickerCount = tickerCount + 1
            'Update tickersymbol for new stock
            'This works when the stocks are already sorted by ticker symbols, as in this data set.
            tickerSymbol = Cells(j, 1).Value
            'clear variables to reuse for next tickersymbol
            openingDate = DateSerial(2500, 1, 1)  'date far in the future ensures opening date will be less than stored date
            closingDate = DateSerial(2000, 1, 1)  'date earlier than 2018 ensures closing date will be greater than stored date
            stockVolume = 0
            k = j
    
            Do While Cells(k, 1).Value = tickerSymbol
                'add next stock volume to running total for all records with this ticker symbol
                stockVolume = stockVolume + Cells(k, 8).Value
                
                'Find opening and closing dates and prices for each ticker symbol
                If Cells(k, 3).Value < openingDate Then
                    openingDate = Cells(k, 3).Value
                    openingPrice = Cells(k, 4).Value
                End If
                If Cells(k, 3).Value > closingDate Then
                    closingDate = Cells(k, 3).Value
                    closingPrice = Cells(k, 7).Value
                End If
                
                'Go to the next row (k+1) and continue looping through this ticker symbol
                k = k + 1
            Loop
            
            'Calculate Yearly change and percent change for each ticker symbol
            'display symbol, yearly and percent change, as well as stock volume total in next tickercount row, columns J-M.
            yearlyChange = closingPrice - openingPrice
            percentChange = yearlyChange / openingPrice
            Cells(tickerCount, 10).Value = tickerSymbol
            Cells(tickerCount, 11).Value = yearlyChange
            Cells(tickerCount, 12).Value = percentChange
            Cells(tickerCount, 13).Value = stockVolume
            
        End If   'end if ticker symbol is different than stored value, skip if ticker symbol is same - k loop takes care of those.
    Next j
    

    'After the summary table is populated, use it to
    'Find and display the stock with the greatest % increase, greatest % decrease, and largest total volumn in columns O-Q.
    
    'label tabel and format columns for third table
    Range("O2").Value = "Greatest % Increase"
    Range("O3").Value = "Greatest % Decrease"
    Range("O4").Value = "Greatest Total Volume"
    Columns("O:O").ColumnWidth = 21
    
    Range("P1").Value = "Ticker"
    Columns("P:P").ColumnWidth = 6
    
    Range("Q1").Value = "Value"
    Columns("Q:Q").ColumnWidth = 12
    Range("Q2:Q3").NumberFormat = "0.00%"
    
    'Zero out variable data from previous sheet
    greatestIncreaseTicker = ""
    greatestDecreaseTicker = ""
    greatestVolumeTicker = ""
    'zero works for these values as long as every set has both positive and negative changes.
    greatestIncreaseValue = 0
    greatestDecreaseValue = 0
    greatestVolumeValue = 0

    
    'Loop through summary table (columns J-M) to find values.
    'Using lowercase letter L for this loop.
    For l = 2 To tickerCount
        If Cells(l, 12).Value > greatestIncreaseValue Then
            greatestIncreaseValue = Cells(l, 12).Value
            greatestIncreaseTicker = Cells(l, 10).Value
        End If
        
        If Cells(l, 12).Value < greatestDecreaseValue Then
            greatestDecreaseValue = Cells(l, 12).Value
            greatestDecreaseTicker = Cells(l, 10).Value
        End If
        
        If Cells(l, 13).Value > greatestVolumeValue Then
            greatestVolumeValue = Cells(l, 13).Value
            greatestVolumeTicker = Cells(l, 10).Value
        End If
    Next l
        
    'Display results of loop in P2:Q4
    Range("P2").Value = greatestIncreaseTicker
    Range("P3").Value = greatestDecreaseTicker
    Range("P4").Value = greatestVolumeTicker
    Range("Q2").Value = greatestIncreaseValue
    Range("Q3").Value = greatestDecreaseValue
    Range("Q4").Value = greatestVolumeValue

Next i  'next worksheet

    
End Sub

